- title: "Project Setup: Next.js + TypeScript + Tailwind + Biome"
  overview: "Initialize the frontend project with Next.js, TypeScript, Tailwind CSS, and configure Biome for linting/formatting."
  why_needed: "Establishes the foundational codebase and development environment for the entire application."
  what_to_do:
    - "Initialize a new Next.js project with TypeScript."
    - "Integrate Tailwind CSS following official Next.js guidelines."
    - "Configure Tailwind `tailwind.config.js` with any initial theme settings (e.g., primary colors if decided)."
    - "Install and configure Biome for linting and formatting."
    - "Set up basic project structure (e.g., `components`, `pages`, `lib`, `hooks`, `styles` folders)."
    - "Ensure `dev`, `build`, `lint`, `format` scripts are working in `package.json`."
    - "Create a basic `Layout` component that will wrap page content."
  definition_of_done:
    - "Project can be compiled and run locally."
    - "Tailwind CSS classes are correctly applied and processed."
    - "Biome can lint and format the codebase without errors."
    - "Basic project directory structure is in place."
    - "A placeholder `Layout.tsx` component exists."
  labels:
    - "chore"
    - "setup"
    - "frontend"
    - "priority-high"
  tech_lead_notes: "Ensure Biome configuration is committed. Agree on a consistent project structure early."

- title: "Backend Setup: Supabase Project Initialization & SDK Integration"
  overview: "Set up the Supabase project (Auth, Database, Storage) and integrate the Supabase JS SDK into the Next.js application."
  why_needed: "Provides the backend infrastructure for user authentication, data storage, and file management needed for all features."
  what_to_do:
    - "Create a new project in Supabase."
    - "Enable Auth, Database, and Storage services in Supabase."
    - "Install the `@supabase/supabase-js` SDK in the Next.js project."
    - "Create a Supabase client helper/singleton (e.g., `lib/supabaseClient.ts`) using environment variables for URL and anon key."
    - "Ensure environment variables (`NEXT_PUBLIC_SUPABASE_URL`, `NEXT_PUBLIC_SUPABASE_ANON_KEY`) are correctly configured and documented in `.env.local.example`."
    - "Test basic connectivity to Supabase (e.g., a simple query in a server-side function or API route if necessary)."
  definition_of_done:
    - "Supabase project is created and services are active."
    - "Supabase JS SDK is installed and configured in the Next.js app."
    - "Supabase client can be successfully initialized using environment variables."
    - "`.env.local.example` file includes necessary Supabase variables."
  labels:
    - "chore"
    - "setup"
    - "backend"
    - "supabase"
    - "priority-high"
  tech_lead_notes: "Securely manage Supabase keys. Do not commit service_role key to the repo. Discuss Row Level Security (RLS) principles early, even if implemented later."

- title: "Database Schema: Initial Design & Migrations for Core Entities"
  overview: "Design and implement the initial database schema for Users, Learning Spaces, Tasks, and Resources using Supabase migrations."
  why_needed: "Defines the structure for storing and retrieving application data, which is fundamental for MVP features."
  what_to_do:
    - "Define table structures for: `users` (public.users created by Supabase Auth, consider a `profiles` table linked via user_id for public data), `learning_spaces` (owner_id, name, description, etc.), `tasks` (space_id, title, description, status, priority, due_date), `resources` (space_id, type, title, url, file_path, content, created_at)."
    - "Define tables for `categories` and `tags`, and a join table for `resource_tags` (resource_id, tag_id)."
    - "Use Supabase's migration system (SQL or management console with subsequent `db diff` and `db push`) to create these tables."
    - "Establish foreign key relationships and appropriate indexing (e.g., on `space_id` in tasks/resources)."
    - "Ensure RLS policies are drafted conceptually for these tables (e.g., users can only access their own data)."
  definition_of_done:
    - "SQL migration files for `learning_spaces`, `tasks`, `resources`, `categories`, `tags`, `resource_tags` tables are created and applied."
    - "Relationships between tables are correctly defined (e.g., a task belongs to a learning space, a space belongs to a user)."
    - "Primary and foreign keys are set up."
    - "Basic RLS policy concepts for data ownership are documented/discussed for each table."
  labels:
    - "database"
    - "backend"
    - "supabase"
    - "priority-high"
  tech_lead_notes: "Focus on a normalized structure but consider query patterns for performance. Use UUIDs for primary keys. All tables should have `created_at` and `updated_at` timestamps. RLS is critical for security; start with 'deny all' and explicitly grant permissions."

- title: "Auth: User Signup Flow (UI & Supabase Integration)"
  overview: "Implement the user interface and backend logic for new user registration using Supabase Auth."
  why_needed: "Allows new users to create accounts, which is the entry point to using the application."
  what_to_do:
    - "Create a signup page (`/signup`)."
    - "Design a form for email and password input."
    - "Implement client-side validation for inputs."
    - "Integrate with `supabase.auth.signUp()` method."
    - "Handle success (e.g., display message about confirmation email, redirect to login or dashboard)."
    - "Handle errors (e.g., display error messages from Supabase)."
    - "If creating a separate `profiles` table, ensure a new profile is created (e.g., via a trigger function in Supabase) upon user signup."
  definition_of_done:
    - "Users can successfully create an account using an email and password."
    - "Appropriate feedback is provided to the user during and after signup (success/error messages)."
    - "Supabase Auth handles email confirmation if enabled (default)."
    - "A new user record is created in `auth.users` and, if applicable, in a `profiles` table."
  labels:
    - "feature"
    - "auth"
    - "frontend"
    - "backend"
    - "priority-high"
  tech_lead_notes: "Ensure password policies are communicated if any non-default. Handle Supabase Auth errors gracefully. Consider UI for 'Resend confirmation email'."

- title: "Auth: User Login & Session Management (UI & Supabase Integration)"
  overview: "Implement the user interface and backend logic for existing user login and session management using Supabase Auth."
  why_needed: "Allows returning users to access their accounts and maintains their logged-in state."
  what_to_do:
    - "Create a login page (`/login`)."
    - "Design a form for email and password input."
    - "Implement client-side validation."
    - "Integrate with `supabase.auth.signInWithPassword()`."
    - "On successful login, redirect to the main dashboard."
    - "Handle login errors (e.g., invalid credentials)."
    - "Implement session management (Supabase SDK handles this largely, but ensure app state reflects auth status)."
    - "Create a context/hook (e.g., `useAuth`) to provide user session information throughout the app."
    - "Protect routes that require authentication."
  definition_of_done:
    - "Users can successfully log in with their credentials."
    - "Users are redirected to the dashboard upon successful login."
    - "Login errors are displayed appropriately."
    - "User session is persisted across page reloads/browser sessions until logout."
    - "Authenticated user data (e.g., user ID, email) is accessible via the `useAuth` hook."
    - "Unauthenticated users attempting to access protected routes are redirected to login."
  labels:
    - "feature"
    - "auth"
    - "frontend"
    - "backend"
    - "priority-high"
  tech_lead_notes: "Consider 'Forgot Password' flow (can be post-MVP but good to note). The `useAuth` hook should efficiently manage auth state changes."

- title: "Auth: User Logout Functionality"
  overview: "Implement the functionality for users to log out of the application."
  why_needed: "Allows users to securely end their session."
  what_to_do:
    - "Provide a logout button/link in the application layout (e.g., in a user dropdown)."
    - "Call `supabase.auth.signOut()` on click."
    - "Redirect the user to the login page or homepage after logout."
    - "Clear any local user session state in the app."
  definition_of_done:
    - "Users can successfully log out."
    - "User session is cleared."
    - "User is redirected to an appropriate public page (e.g., login)."
  labels:
    - "feature"
    - "auth"
    - "frontend"
    - "backend"
  tech_lead_notes: "Ensure logout is handled cleanly and all sensitive session data is cleared from the client."

- title: "Feature: Learning Spaces - CRUD API Endpoints"
  overview: "Develop API endpoints (or server-side functions) for Creating, Reading, Updating, and Deleting Learning Spaces, integrated with Supabase."
  why_needed: "Provides the backend logic for managing the primary organizational unit of the application."
  what_to_do:
    - "Define API routes (e.g., `POST /api/spaces`, `GET /api/spaces`, `GET /api/spaces/[id]`, `PUT /api/spaces/[id]`, `DELETE /api/spaces/[id]`)."
    - "Implement logic using Supabase client to interact with the `learning_spaces` table."
    - "Ensure all operations are authenticated and authorized (user can only manage their own spaces - implement RLS in Supabase and/or check in API)."
    - "Handle request validation (e.g., name is required)."
    - "Return appropriate responses (data, errors)."
  definition_of_done:
    - "API endpoints for CRUD operations on Learning Spaces are implemented and functional."
    - "Data is persisted correctly in the Supabase `learning_spaces` table."
    - "Authentication and ownership-based authorization are enforced for all operations."
    - "Proper error handling and response codes are implemented."
  labels:
    - "feature"
    - "learning-spaces"
    - "backend"
    - "api"
    - "supabase"
    - "priority-high"
  tech_lead_notes: "Strictly enforce RLS at the database level for data security. API logic should primarily orchestrate calls to Supabase and handle business rules not covered by RLS."

- title: "Feature: Learning Spaces - UI for Creation and Listing"
  overview: "Implement the user interface for creating new Learning Spaces and listing existing ones on the main dashboard."
  why_needed: "Allows users to visually interact with and manage their Learning Spaces."
  what_to_do:
    - "Design a form/modal for creating a new Learning Space (input for name, description)."
    - "Implement client-side logic to call the 'Create Learning Space' API."
    - "On the main dashboard, fetch and display a list/grid of the authenticated user's Learning Spaces."
    - "Each listed space should be a link to its dedicated page (route to be `/spaces/[id]`)."
    - "Implement UI for editing and deleting existing Learning Spaces (e.g., buttons on each space card/item)."
  definition_of_done:
    - "Users can create a new Learning Space through the UI."
    - "Authenticated users can see a list of their Learning Spaces on the dashboard."
    - "Users can initiate edit and delete operations for their spaces from the UI."
    - "UI updates reactively after CRUD operations (e.g., new space appears in list, deleted space is removed)."
  labels:
    - "feature"
    - "learning-spaces"
    - "frontend"
    - "UI"
    - "priority-high"
  tech_lead_notes: "Consider UI states for loading, empty list, and errors. Make interactions intuitive."

- title: "Feature: Task Management - Core Task Model & CRUD API"
  overview: "Develop API endpoints for Creating, Reading, Updating, and Deleting Tasks within a specific Learning Space."
  why_needed: "Provides backend support for managing individual learning tasks, a core feature of the application."
  what_to_do:
    - "Define API routes for tasks, scoped to a Learning Space (e.g., `POST /api/spaces/[spaceId]/tasks`, `GET /api/spaces/[spaceId]/tasks`, `PUT /api/tasks/[taskId]`, `DELETE /api/tasks/[taskId]`)."
    - "Implement logic using Supabase client to interact with the `tasks` table."
    - "Ensure tasks are associated with the correct `learning_space` and `user_id` (via space ownership)."
    - "Enforce authorization (user can only manage tasks within their own spaces)."
    - "Handle request validation for task properties (title, status, priority, due_date)."
  definition_of_done:
    - "API endpoints for CRUD operations on Tasks are implemented and functional."
    - "Tasks are correctly associated with their parent Learning Space."
    - "Authentication and authorization are enforced."
    - "Data is persisted correctly in the Supabase `tasks` table."
  labels:
    - "feature"
    - "tasks"
    - "backend"
    - "api"
    - "supabase"
    - "priority-medium"
  tech_lead_notes: "Ensure task status transitions are well-defined if any specific logic is needed beyond simple updates. RLS on `tasks` table is critical."

- title: "Feature: Task Management - UI for Task Creation & List View"
  overview: "Implement the UI within a Learning Space page for creating new tasks and displaying them in a list view."
  why_needed: "Allows users to add and view their learning tasks in a structured format."
  what_to_do:
    - "On the Learning Space page (`/spaces/[id]`), create a section for task management."
    - "Implement a form/input area for creating new tasks (title, description, priority, due_date)."
    - "Call the 'Create Task' API and update the UI reactively."
    - "Display tasks associated with the current Learning Space in a list format."
    - "Each task in the list should allow viewing/editing of details and marking as complete/changing status."
    - "Allow deletion of tasks."
  definition_of_done:
    - "Users can create tasks within a Learning Space via the UI."
    - "Tasks are displayed in a list view on the Learning Space page."
    - "Users can update task details (e.g., status, priority, due date) and delete tasks from the list view."
    - "UI updates reactively to task CRUD operations."
  labels:
    - "feature"
    - "tasks"
    - "frontend"
    - "UI"
    - "priority-medium"
  tech_lead_notes: "Consider inline editing for quick updates in the list view. Ensure clear visual distinction for task priority and status."

- title: "Feature: Task Management - UI for Kanban Board View"
  overview: "Implement a Kanban board view for tasks within a Learning Space, including drag-and-drop functionality."
  why_needed: "Provides an alternative, visual way for users to manage task workflow and progress."
  what_to_do:
    - "On the Learning Space page, add a toggle or tab to switch between List and Kanban views for tasks."
    - "Design Kanban columns based on task statuses (e.g., 'To Do', 'In Progress', 'Completed')."
    - "Display tasks as cards within their respective status columns."
    - "Implement drag-and-drop functionality for moving tasks between columns (updating task status via API)."
    - "Integrate a library like `react-beautiful-dnd` or similar for drag-and-drop."
    - "Ensure the Kanban view updates reactively when tasks are added, updated, or deleted."
  definition_of_done:
    - "Users can switch to a Kanban view for tasks within a Learning Space."
    - "Tasks are displayed as cards in columns representing their status."
    - "Users can drag and drop tasks between columns to update their status."
    - "Task status changes are persisted to the backend via API calls."
    - "Kanban view is synchronized with task data."
  labels:
    - "feature"
    - "tasks"
    - "frontend"
    - "UI"
    - "priority-high" # Due to Jira reference and visual appeal
  tech_lead_notes: "Drag-and-drop can be complex; focus on core functionality. Optimize performance for boards with many tasks. Ensure good visual feedback during drag operations."

- title: "Feature: Task Management - Task Details UI"
  overview: "Implement the UI for displaying and editing detailed information for a single task."
  why_needed: "Allows users to add and manage comprehensive information related to each task, like description, priority, and due dates."
  what_to_do:
    - "Create a modal or a dedicated view/panel to show/edit task details."
    - "Display all relevant task fields: title, description (rich text/markdown if feasible, else textarea), priority (dropdown/selector), due date (date picker), status (dropdown/selector, reflects Kanban column)."
    - "Allow users to edit these fields and save changes via an API call."
    - "This UI can be triggered from both list view and Kanban cards."
  definition_of_done:
    - "Users can open a detailed view/edit modal for any task."
    - "All specified task details are displayed."
    - "Users can modify task details and save changes."
    - "Changes are persisted to the backend and reflected in the main task views (List/Kanban)."
  labels:
    - "feature"
    - "tasks"
    - "frontend"
    - "UI"
    - "priority-medium"
  tech_lead_notes: "For description, a simple textarea is MVP. If opting for rich text/markdown, choose a lightweight library. Ensure due date picker is user-friendly."

- title: "Feature: Resource Library - Core Resource Model & CRUD API"
  overview: "Develop API endpoints for Creating, Reading, Updating, and Deleting Resources (URLs, notes, files) within a Learning Space."
  why_needed: "Provides backend support for managing learning materials associated with each topic."
  what_to_do:
    - "Define API routes for resources, scoped to a Learning Space (e.g., `POST /api/spaces/[spaceId]/resources`, etc.)."
    - "Implement logic using Supabase client to interact with `resources`, `categories`, `tags`, and `resource_tags` tables."
    - "Handle different resource types (URL, note, file)."
    - "For URL resources, consider server-side fetching of page titles if feasible."
    - "For file resources, integrate with Supabase Storage for uploads and generating access URLs."
    - "Enforce authorization (user can only manage resources within their own spaces)."
  definition_of_done:
    - "API endpoints for CRUD operations on Resources are implemented."
    - "Resources are correctly associated with their parent Learning Space and user."
    - "Different resource types (URL, note, file) are handled."
    - "File uploads to Supabase Storage and retrieval of file URLs are functional."
    - "Categorization and tagging data is managed via API."
    - "Authorization is enforced."
  labels:
    - "feature"
    - "resources"
    - "backend"
    - "api"
    - "supabase"
    - "priority-medium"
  tech_lead_notes: "RLS on resources, categories, and tags is crucial. For file uploads, define size limits and allowed types. Title fetching for URLs can be a nice-to-have if time permits, otherwise, user enters title."

- title: "Feature: Resource Library - UI for Managing Resources"
  overview: "Implement the UI within a Learning Space page for adding, viewing, and organizing resources, including categorization and tagging."
  why_needed: "Allows users to visually manage their collection of learning materials for a specific topic."
  what_to_do:
    - "On the Learning Space page, create a dedicated section/tab for the Resource Library."
    - "Implement forms/modals for adding new resources:
        - URL: input for URL, title (auto-fetched or manual), description, category, tags.
        - Note: input for title, content (textarea), category, tags.
        - File: input for file upload, title, description, category, tags."
    - "Display resources in a list or card view, showing type, title, and other relevant info."
    - "Allow users to edit and delete existing resources."
    - "Implement UI for selecting/creating categories and tags."
    - "Add filtering/searching capabilities based on type, category, and tags."
  definition_of_done:
    - "Users can add URL, note, and file resources via the UI."
    - "Resources are displayed within the Learning Space's resource library."
    - "Users can edit and delete resources."
    - "Users can assign categories and tags to resources."
    - "Basic filtering/searching by type, category, or tag is functional."
    - "File uploads are handled through the UI."
  labels:
    - "feature"
    - "resources"
    - "frontend"
    - "UI"
    - "priority-medium"
  tech_lead_notes: "Consider how to display different resource types distinctly. Tag input can be a component like a comma-separated input that converts to tag pills. For file uploads, show progress if possible."

- title: "Feature: Progress Visualization - API & Logic"
  overview: "Develop backend logic and potentially API endpoints to calculate progress for each Learning Space."
  why_needed: "Provides the data necessary to visually represent how much of a learning topic has been completed."
  what_to_do:
    - "Define how progress is calculated (e.g., percentage of tasks completed: `completed_tasks / total_tasks`)."
    - "This logic can be part of the API that fetches Learning Space details or a separate endpoint if complex."
    - "Ensure the calculation is efficient, especially if displayed on a dashboard with many spaces."
    - "If fetching spaces for the dashboard, include this progress metric in the returned data."
  definition_of_done:
    - "A clear method for calculating progress for a Learning Space is implemented."
    - "API endpoints serving Learning Space data include the calculated progress metric."
    - "The calculation is accurate based on task statuses."
  labels:
    - "feature"
    - "progress-visualization"
    - "backend"
    - "api"
    - "priority-low" # Lower than core CRUD, but still MVP
  tech_lead_notes: "Keep the calculation simple for MVP. More complex metrics can be added later. Consider if this can be a computed column or view in Supabase for efficiency."

- title: "Feature: Progress Visualization - UI Display"
  overview: "Implement the UI elements to display learning progress on the main dashboard and within individual Learning Space pages."
  why_needed: "Visually motivates users and provides an at-a-glance understanding of their advancement."
  what_to_do:
    - "On the main dashboard, display a progress bar or percentage for each Learning Space card/item."
    - "Within each Learning Space page, display a more prominent progress indicator for that specific space."
    - "Ensure the visual representation is clear and easy to understand."
    - "UI should update when task statuses change, thereby affecting progress."
  definition_of_done:
    - "Progress (e.g., percentage, progress bar) is displayed for each Learning Space on the main dashboard."
    - "A clear progress indicator is shown on individual Learning Space pages."
    - "Progress indicators update dynamically as tasks are completed/reopened."
  labels:
    - "feature"
    - "progress-visualization"
    - "frontend"
    - "UI"
    - "priority-low"
  tech_lead_notes: "Choose visually appealing and accessible components for progress display. Ensure consistency in how progress is shown."

- title: "Core: Main Dashboard UI & Basic Navigation"
  overview: "Develop the main dashboard page that lists Learning Spaces and implement basic application-wide navigation."
  why_needed: "Serves as the central hub for users to access their learning content and navigate the application."
  what_to_do:
    - "Design the main dashboard page (`/dashboard` or `/`)."
    - "This page will primarily display the list of Learning Spaces (covered by Learning Spaces UI task, but ensure it's the main content here)."
    - "Implement a global navigation bar/sidebar within the main `Layout` component."
    - "Navigation should include links to: Dashboard, (potentially settings or profile later), Logout button."
    - "Ensure clear navigation paths between dashboard and individual Learning Space pages."
  definition_of_done:
    - "Main dashboard page is implemented and displays Learning Spaces."
    - "Global navigation (e.g., header/sidebar) is present and functional."
    - "Users can easily navigate between major sections of the app (Dashboard, Learning Spaces)."
  labels:
    - "core"
    - "navigation"
    - "frontend"
    - "UI"
    - "priority-medium"
  tech_lead_notes: "Keep navigation simple and intuitive. The dashboard is the primary landing page post-login."

- title: "Styling: Initial Global Styles & Tailwind Configuration"
  overview: "Apply consistent global styling using Tailwind CSS and Material Design principles (as inspiration)."
  why_needed: "Ensures a baseline level of visual polish and usability for the MVP."
  what_to_do:
    - "Refine Tailwind `tailwind.config.js` with chosen color palette, fonts, and spacing based on Material Design inspiration."
    - "Apply global styles in `styles/globals.css` for base elements if needed (e.g., body background, default font)."
    - "Ensure consistent use of spacing, typography, and color across all implemented UI components."
    - "Review existing UI components and apply consistent styling."
    - "Create a few common, reusable presentational components (e.g., Button, Card, Modal shell) styled with Tailwind."
  definition_of_done:
    - "A consistent visual theme is applied across the application."
    - "Tailwind configuration is finalized for MVP."
    - "Common UI elements (buttons, inputs, cards) have a consistent look and feel."
    - "The app has a clean, professional, and usable appearance."
  labels:
    - "UI/UX"
    - "frontend"
    - "styling"
    - "tailwind"
  tech_lead_notes: "Don't aim for perfection, but a good baseline. Focus on clarity, readability, and ease of use. Document any custom Tailwind components or patterns."

- title: "Quality: Responsive Design Pass"
  overview: "Ensure all implemented UI views are responsive and usable on common device sizes (desktop, tablet, mobile)."
  why_needed: "Provides a good user experience across different devices, crucial for a web application."
  what_to_do:
    - "Review all pages and components (Dashboard, Learning Space page, Modals, Forms)."
    - "Apply Tailwind's responsive prefixes (sm, md, lg, xl) to adjust layouts, font sizes, and element visibility as needed."
    - "Test on various screen sizes using browser developer tools."
    - "Prioritize usability on smaller screens for key workflows."
  definition_of_done:
    - "All MVP features are usable and look presentable on desktop, tablet, and mobile screen sizes."
    - "Navigation is accessible on all screen sizes."
    - "No major layout breaks or content overflow issues."
  labels:
    - "UI/UX"
    - "frontend"
    - "responsive-design"
    - "quality"
  tech_lead_notes: "Mobile-first approach can be beneficial if not already adopted. Test critical user flows on actual devices if possible."

- title: "Testing: Setup Basic Playwright E2E Test Structure & CI Workflow"
  overview: "Install Playwright, write a few initial E2E tests for critical user flows, and set up a basic CI workflow to run tests."
  why_needed: "Establishes a foundation for automated testing, ensuring application stability and catching regressions early."
  what_to_do:
    - "Install Playwright and configure it for the Next.js project."
    - "Write E2E tests for:
        - User signup and login.
        - Creating a new Learning Space.
        - Creating a new Task within a Space."
    - "Set up a GitHub Actions (or similar CI) workflow that runs Biome (lint/format) and Playwright tests on push/PR to main branches."
  definition_of_done:
    - "Playwright is configured and can run tests against the local dev server."
    - "At least 3 critical E2E tests pass successfully."
    - "A CI workflow is set up in GitHub Actions that runs linter/formatter and E2E tests automatically."
    - "The CI workflow status (pass/fail) is visible on PRs."
  labels:
    - "testing"
    - "e2e"
    - "playwright"
    - "CI"
    - "quality"
  tech_lead_notes: "Focus E2E tests on happy paths for MVP. Ensure tests are reliable and not flaky. The CI setup is crucial for maintaining code quality."